import fs from "node:fs";
import { join } from "path";
import { getProjectRoot } from "~/scripts/helpers.js";
import { Board } from "~/src/game/board.js";
import { BOARD_CELLS } from "~/src/game/constants.js";
import {
  communityDataByIdentifier,
  CommunityDataIdentifiers,
} from "~/src/game/generated-community-data.js";
import { TileState } from "~/src/game/types/tile-states.js";
import { assertEqual } from "~/src/helpers.js";
import { format } from "prettier";
import {
  RecursiveFastLookupEntryOrUnset,
  RecursiveFastLookupEntry,
} from "~/src/game/solver/modules/calculate-state-candidates/community-data-state-candidates/recursive-fast.js";

const repoRoot = getProjectRoot();
assertEqual(
  import.meta.env["SOLVER"],
  "community-data-recursive",
  "Must use solver community-data-recursive"
);

const outFile = join(
  repoRoot,
  "src",
  "game",
  "solver",
  "modules",
  "calculate-state-candidates",
  "community-data-state-candidates",
  "recursive-fast.lookups.ts"
);

const identifierMap: Partial<
  Record<CommunityDataIdentifiers, RecursiveFastLookupEntryOrUnset[]>
> = {};
for (const identifier of Object.keys(
  communityDataByIdentifier
) as CommunityDataIdentifiers[]) {
  console.log(`Solve ${identifier}`);
  const board = new Board();
  const data = communityDataByIdentifier[identifier];
  for (const index of data.Blocked) {
    board.setUserState(index, TileState.Blocked);
  }
  const result: RecursiveFastLookupEntryOrUnset[] = [];
  const maxWeight = board.solveState.getMaxTileWeight();
  for (let index = 0; index < BOARD_CELLS; index++) {
    const suggestion = board.solveState.solveState.getSuggestion(index);
    const entry: RecursiveFastLookupEntry = {};
    if (suggestion !== null) {
      assertEqual(suggestion.Blocked, 0);
      if (suggestion["Fox"] !== 0) {
        entry["F"] = suggestion["Fox"];
      }
      if (suggestion["Present"] !== 0) {
        entry["P"] = suggestion["Present"];
      }
      if (suggestion["Sword"] !== 0) {
        entry["S"] = suggestion["Sword"];
      }
    }
    const smartFill = board.solveState.solveState.getSmartFill(index);
    assertEqual(smartFill, null);
    const weight =
      board.solveState.solveState.getFinalWeight(index)?.value ?? undefined;
    if (weight !== undefined && weight === maxWeight) {
      entry.w = weight;
    }

    result.push(Object.keys(entry).length === 0 ? 0 : entry);
  }
  identifierMap[identifier] = result;
}

console.log(`Generate results for all solves`);
fs.writeFileSync(
  outFile,

  await format(
    `// This file was automatically generated by /scripts/recursive-fast-lookups/create-recursive-fast-lookups.ts
// Do not modify this file directly.
import { CommunityDataIdentifiers } from "~/src/game/generated-community-data.js";
import { RecursiveFastLookupEntryOrUnset } from "./recursive-fast.js";

/**
 * Hard-coded first lookup to provide better performance on mobile devices.
 */
export const RECURSIVE_FAST_LOOKUPS: Record<CommunityDataIdentifiers, RecursiveFastLookupEntryOrUnset[]> = ${JSON.stringify(identifierMap)} as const;`,
    { parser: "typescript" }
  )
);

console.log(`Output written to ${outFile}`);
console.log("Done");
